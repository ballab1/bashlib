#!/bin/bash

#----------------------------------------------------------------------------------------------
#
#  general 'json' scripts
#

#----------------------------------------------------------------------------------------------
function json.encodeArray()
{
    local -n assoc="${1:?}"
    local type=$(typeset -p "$1" | awk '{print $2}')
    if [ "$type" = '--' ]; then
        echo -n "$assoc"

    elif [ "${#assoc[*]}" -gt 0 ]; then
        echo -n '['
        local val comma
        for val in "${assoc[@]}"; do
            [ -z "${comma:-}" ] || printf ','
            json.encodeField '--' "$val"
            comma=','
        done
        echo -n ']'
    fi
}

#----------------------------------------------------------------------------------------------
function json.encodeBoolean()
{
    local boolVal="${1:-true}"

    [ "$boolVal" = true ] || boolVal='false'
    echo -n "$boolVal"
}

#----------------------------------------------------------------------------------------------
function json.encodeField()
{
    local -r name=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    shift

    [ "$name" = '--' ] || printf '"%s":' "$name"
    if [[ $# -eq 0 || -z "${1:-}" ]]; then
        echo -n 'null'

    elif [[ "$1" =~ ^true|false$ ]]; then
        json.encodeBoolean "$1"

    elif [[ "$1" =~ ^[0-9]+$ ]]; then
        json.encodeInteger "$1"

    elif [[ "$1" = '{'*'}' ]]; then
        json.encodeHash "${1:1:-1}"

    elif [[ "$1" = '['*']' ]]; then
        json.encodeArray "${1:1:-1}"

    else
        json.encodeString "$1"
    fi
}
export -f json.encodeField

#----------------------------------------------------------------------------------------------
function json.encodeHash()
{
    local -n assoc="${1:?}"
    local type=$(typeset -p "$1" | awk '{print $2}')
    if [ "$type" = '--' ]; then
        echo -n "$assoc"

    else
        echo -n '{'
        if [ "${#assoc[*]}" -gt 0 ]; then
            local val comma
            for val in "${!assoc[@]}"; do
                [ -z "${comma:-}" ] || printf ','
                json.encodeField "$val" "${assoc[$val]}"
                comma=','
            done
        fi
        echo -n '}'
    fi
}

#----------------------------------------------------------------------------------------------
function json.encodeInteger()
{
    local -ri intVal=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    printf '%d' "$intVal"
}

#----------------------------------------------------------------------------------------------
function json.encodeString()
{
    local -r strVal=${1:?"Input parameter 'name' must be passed to 'function ${FUNCNAME[0]}()'"}
    printf '"%s"' "${strVal//\"/\\\"}"
}
